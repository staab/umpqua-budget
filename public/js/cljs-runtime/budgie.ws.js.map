{"version":3,"file":"budgie.ws.js","sources":["budgie/ws.cljs"],"mappings":";;;AAGA,AAAKA,eAAG,6CAAA,7CAACC;AACT,AAAKC,kBAAM,6CAAA,7CAACD;AAIZ,uBAAA,vBAAME,sDAAOC,KAAKC;AAAlB,AACE,OAACC,mDACCJ,gBACA,WAAKK;AAAL,AACE,IAAMC,eAAa,AAACC,6CAAKF,SAAS,wGAAA,2CAAA,0DAAA,7MAACG,wMAAcN,gEAAcC;AAA/D,AACE,oBAAA,AAAAM,gBAAKX;AACH,AAAI,oBAAA,pBAACa;kBAADD;AAAA,AAAO,OAAA,AAAAD,mCAAAC,nBAAQZ;;CAAMQ;;AAAzB;;AACAD;;;;AAIV,GAAA,QAAAO,mCAAAC,sCAAAC;AAAA;AAAA,AAAA,2BAAA,iBAAAC,6BAAA,AAAAhB,6CAAA,tHAAUyB;IAAVR,6BAAA,AAAAjB,6CAAA;IAAAkB,6BAAA,AAAAlB,6CAAA;IAAAmB,iCAAA,AAAAnB,6CAAA;IAAAoB,0BAAA,AAAAC,4CAAA,mCAAA,gEAAA,AAAAC;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,YAAA,kBAAA,qDAAA,4DAAAJ,wBAAAJ,2BAAAC,2BAAAC,2BAAAC;;;AAIA,uBAAA,vBAAMO,sDAAYC;AAAlB,AACE,qGAAA,rGAACC,wHAAuB,AAAQD;;AAChC,IAAAE,WAAgB,AAACC,sDAAwB,AAAQH;AAAjD,AAAA,wHAAAE,+CAAAA,/JAACJ,yDAAAA,mEAAAA;;AAEH,2BAAA,3BAAMM;AAAN,AACE,IAAAC,2BAAA,AAAAtB,gBAAmBX;AAAnB,AAAA,oBAAAiC;AAAA,AAAA,mBAAAA,fAAWC;AAAX,AAAuB,AAAQA;;AAA/B;;AACA,IAAMC,SAAO,KAAAC,UAAA;AAAb,AACE,wBAAA,OAAA,/BAAmBD;;AAAnB,AAAkC,OAACE,sBAAOrC,aAAGmC;;;;AAC7C,wBAAA,xBAAmBA,kCAAiBR;;AACpC,+BAAA,QAAA,hCAAmBQ;;AAAnB,AAAmC,0CAAA,nCAACE,sBAAOrC;;;;AAE/C,YAAA,ZAACsC;AAAD,AAAiB,GAAM,CAAA,AAAA3B,iCAAA,jBAAOX;AAAb,AAAiB,OAACgC;;AAAlB;;GAAjB","names":["budgie.ws/ws","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","budgie.ws/queue","budgie.ws/send!","type","payload","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","messages","all-messages","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","p1__11004#","cljs.core/run!","js/budgie","js/budgie.ws","js/budgie.ws.handle-message","method-table__4414__auto__","prefer-table__4415__auto__","method-cache__4416__auto__","cached-hierarchy__4417__auto__","hierarchy__4418__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/get-global-hierarchy","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","budgie.ws/handle-message","budgie.ws/on-message","evt","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__11005","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","budgie.ws/start-ws!","temp__5457__auto__","old-ws","socket","js/WebSocket","cljs.core/reset!","js/setInterval"],"sourcesContent":["(ns budgie.ws\n  (:require [cljs.reader :refer [read-string]]))\n\n(def ws (atom nil))\n(def queue (atom []))\n\n;; Outgoing\n\n(defn send! [type payload]\n  (swap!\n    queue\n    (fn [messages]\n      (let [all-messages (conj messages (pr-str {:type type :payload payload}))]\n        (if @ws\n          (do (run! #(.send @ws %) all-messages) [])\n          messages)))))\n\n;; Incoming\n\n(defmulti handle-message :type)\n\n;; Websocket setup\n\n(defn on-message [evt]\n  (prn \"Handling message\" (.-data evt))\n  (handle-message (cljs.reader/read-string (.-data evt))))\n\n(defn start-ws! []\n  (when-let [old-ws @ws] (.close old-ws))\n  (let [socket (js/WebSocket. \"ws://localhost:5000\")]\n    (.addEventListener socket \"open\" #(reset! ws socket))\n    (.addEventListener socket \"message\" on-message)\n    (.addEventListener socket \"close\" #(reset! ws nil))))\n\n(js/setInterval #(when (nil? @ws) (start-ws!)) 1000)\n"]}