{"version":3,"file":"cljs.tools.reader.impl.utils.js","sources":["cljs/tools/reader/impl/utils.cljs"],"mappings":"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","names":["f","cljs.tools.reader.impl.utils/next-id","c","->key","ns","key-name","cljs.tools.reader.impl.utils/last-id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","code","key-ns","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","ch","p__14133","vec__14134","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.impl.utils/second'","a","b","goog.string/isNumeric","key","x","cljs.tools.reader.impl.utils/ws-rx","cljs.tools.reader.impl.utils/numeric?","js/parseInt","base","this__4203__auto__","k__4204__auto__","this__4205__auto__","k14057","else__4206__auto__","G__14065","cljs.core/Keyword","splicing?","form","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4217__auto__","writer__4218__auto__","opts__4219__auto__","pr-pair__4220__auto__","keyval__4221__auto__","cljs.core/pr-sequential-writer","cljs.core/pr-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__14056","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4201__auto__","__meta","this__4198__auto__","__hash","this__4207__auto__","cljs.core/count","this__4199__auto__","h__4061__auto__","fexpr__14068","coll__4200__auto__","cljs.core/hash-unordered-coll","this14058","other14059","this__4212__auto__","k__4213__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4210__auto__","k__4211__auto__","pred__14070","cljs.core/keyword-identical?","expr__14071","G__14073","G__14074","G__14075","G__14076","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4215__auto__","cljs.core/seq","cljs/core.MapEntry","this__4202__auto__","this__4208__auto__","entry__4209__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/-conj","cljs.tools.reader.impl.utils/ReaderConditional","this__4240__auto__","cljs.core/List","writer__4241__auto__","cljs.core/-write","G__14064","extmap__4236__auto__","G__14087","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","cljs.tools.reader.impl.utils/->ReaderConditional","cljs.tools.reader.impl.utils/map->ReaderConditional","cljs.tools.reader.impl.utils/newline?","cljs.core/chunk-first","s__14090","coll","writer","opts","js/isNaN","cljs.tools.reader.impl.utils/reader-conditional","value","cljs.core/PROTOCOL_SENTINEL","cljs.tools.reader.impl.utils/reader-conditional?","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","vec__14110","vec__14114","cljs.core/name","fexpr__14113","fexpr__14117","cljs.core/namespace","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs/core.ExceptionInfo","ex","cljs.core/Symbol","cljs.core/symbol","cljs.core/keyword","cljs.tools.reader.impl.utils/char","cljs.tools.reader.impl.utils/namespace-keys","keys","cljs.core/char","iter__4324__auto__","cljs.core/LazySeq","temp__5457__auto__","cljs.core/chunked-seq?","c__4322__auto__","size__4323__auto__","b__14092","cljs.core/chunk-buffer","i__14091","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__14089","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.tools.reader.impl.utils/char-code","cljs.tools.reader.impl.utils/ex-info?","cljs.tools.reader.impl.utils/whitespace?","cljs.tools.reader.impl.utils/desugar-meta"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.utils\n  (:refer-clojure :exclude [char])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]))\n\n(defn char [x]\n  (when-not (nil? x)\n    (cljs.core/char x)))\n\n(defn ^boolean ex-info? [ex]\n  (instance? cljs.core.ExceptionInfo ex))\n\n(defrecord ReaderConditional [splicing? form])\n\n(defn ^boolean reader-conditional?\n  \"Return true if the value is the data representation of a reader conditional\"\n  [value]\n  (instance? ReaderConditional value))\n\n(defn reader-conditional\n  \"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.\"\n  [form splicing?]\n  (ReaderConditional. splicing? form))\n\n(extend-protocol IPrintWithWriter\n  ReaderConditional\n  (-pr-writer [coll writer opts]\n    (-write writer (str \"#?\" (when (:splicing? coll) \"@\")))\n    (pr-writer (:form coll) writer opts)))\n\n(def ws-rx #\"[\\s]\")\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  (when-not (nil? ch)\n    (if (identical? ch \\,)\n      true\n      (.test ws-rx ch))))\n\n(defn ^boolean numeric?\n  \"Checks whether a given character is numeric\"\n  [ch]\n  (when-not (nil? ch)\n    (gstring/isNumeric ch)))\n\n(defn ^boolean newline?\n  \"Checks whether the character is a newline\"\n  [c]\n  (or (identical? \\newline c)\n      (identical? \"\\n\" c)\n      (nil? c)))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  [f]\n  (cond\n    (keyword? f) {f true}\n    (symbol? f)  {:tag f}\n    (string? f)  {:tag f}\n    :else        f))\n\n(def last-id (atom 0))\n\n(defn next-id\n  []\n  (swap! last-id inc))\n\n(defn namespace-keys [ns keys]\n  (for [key keys]\n    (if (or (symbol? key)\n            (keyword? key))\n      (let [[key-ns key-name] ((juxt namespace name) key)\n            ->key (if (symbol? key) symbol keyword)]\n        (cond\n          (nil? key-ns)\n          (->key ns key-name)\n\n          (= \"_\" key-ns)\n          (->key key-name)\n\n          :else\n          key))\n      key)))\n\n(defn second' [[a b]]\n  (when-not a b))\n\n(defn char-code [ch base]\n  (let [code (js/parseInt ch base)]\n    (if (js/isNaN code)\n      -1\n      code)))\n"]}