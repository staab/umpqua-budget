{"version":3,"file":"reagent.debug.js","sources":["reagent/debug.cljs"],"mappings":";;AAGA,AAAae,4BAAY,QAAAC;AAEzB,yBAAA,zBAAcX;AAEd,GAAA,QAAAL,oCAAAC,0CAAAC;AAAA;AAAA,AAAA,AAASC,yBAAS,6CAAA,7CAACC;;AAEnB,GAAA,QAAAJ,oCAAAC,0CAAAmB;AAAA;AAAA,AAAA,AAASC,8BACP,qBAAA,JAAMP;SAEE,TADN,AAAM,AAAQA,AADhB;;mCAEeP;yXAC6CA,dAAJC,/GAAZC,rPAAjCC,iFAAeC,qOAAuB,7TAAvC,4GAAA,mFAAA,9HAAOR,4PAAiCS,7TAD1C;;;IAAOL;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;;UAGP,VADN,AAAM,AAASO;;mCACFP;AAAP,6WACiDC,tWAA9CE,iFAAeC,xFAAhB,4GAAA,mFAAA,+DAAmCF,7LAA5BN,8PAAkCS,AAAD,4DAAWL;;;IAD9CA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;;AAEbO;;;AAEJ,+BAAA,/BAAMK,sEAAgBN;AACpB,yBAAA,zBAAMR,AADR;;AAEE,6CAAA,7CAACC,sBAAOH;;AACR,CAACU,kCAAAA,oCAAAA;;AACD,YAAA,AAAAI,RAAMC,wBAAOf;AACX,6CAAA,7CAACG,sBAAOH,tBADV;;AAEE,yBAAA,zBAAME;;AACNa","names":["js/reagent","js/reagent.debug","js/reagent.debug.warnings","reagent.debug/warnings","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.debug/tracking","cljs.core/reset!","args","cljs.core/str","cljs.core/conj","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","f","o","reagent.debug/has-console","js/console","cljs.core/deref","warns","reagent.debug/track-warnings","js/reagent.debug.track-console","reagent.debug/track-console"],"sourcesContent":["(ns reagent.debug\n  (:require-macros [reagent.debug]))\n\n(def ^:const has-console (exists? js/console))\n\n(def ^boolean tracking false)\n\n(defonce warnings (atom nil))\n\n(defonce track-console\n  (let [o #js{}]\n    (set! (.-warn o)\n          (fn [& args]\n            (swap! warnings update-in [:warn] conj (apply str args))))\n    (set! (.-error o)\n          (fn [& args]\n            (swap! warnings update-in [:error] conj (apply str args))))\n    o))\n\n(defn track-warnings [f]\n  (set! tracking true)\n  (reset! warnings nil)\n  (f)\n  (let [warns @warnings]\n    (reset! warnings nil)\n    (set! tracking false)\n    warns))\n"]}