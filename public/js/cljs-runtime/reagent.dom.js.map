{"version":3,"file":"reagent.dom.js","sources":["reagent/dom.cljs"],"mappings":"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","names":["reagent.dom/re-render-component","comp","container","callback","reagent.dom/force-update-all","reagent.dom/unmount-comp","js/module$node_modules$react_dom$index.unmountComponentAtNode","reagent.dom/dom-node","this","*always-update*10871","reagent.impl.util/*always-update*","reagent.ratom/flush!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","reagent.dom/roots","cljs.core/assoc","f","reagent.dom/render-comp","js/module$node_modules$react_dom$index.findDOMNode","reagent.impl.batching/flush-after-render","G__10868","G__10869","G__10870","js/module$node_modules$react_dom$index.render","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","v","js/reagent","js/reagent.dom","js/reagent.dom.roots","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/reagent.dom.imported","reagent.dom/imported","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","reagent.dom/unmount-component-at-node","reagent.impl.template/find-dom-node","reagent.dom.render.cljs$core$IFn$_invoke$arity$3","var_args","G__10873","reagent.dom/render","js/Error","*always-update*10867","seq__10875","cljs.core/seq","chunk__10876","count__10877","i__10878","temp__5457__auto__","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/deref","cljs.core/vals","cljs.core/fn?","reagent.impl.template/as-element"],"sourcesContent":["(ns reagent.dom\n  (:require [react-dom :as react-dom]\n            [reagent.impl.util :as util]\n            [reagent.impl.template :as tmpl]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.debug :refer-macros [dbg]]\n            [reagent.interop :refer-macros [$ $!]]))\n\n(defonce ^:private imported nil)\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container [comp container])\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element. The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container nil))\n  ([comp container callback]\n   (ratom/flush!)\n   (let [f (fn []\n             (tmpl/as-element (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(set! tmpl/find-dom-node dom-node)\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [v (vals @roots)]\n    (apply re-render-component v))\n  \"Updated\")\n"]}