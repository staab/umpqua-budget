{"version":3,"file":"reagent.impl.component.js","sources":["reagent/impl/component.cljs"],"mappings":"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","names":["temp__5455__auto__","fiber","or__3949__auto__","G__10792","c","fmap","name","G__10801","elem","ok","reagent.impl.component/cache-react-class","constructor","G__10765","path","G__10790","parent","reagent.impl.component/cljsify","render-fun","renders","cljs.core/vals","cljs.core/first","G__10800","instance","f","res","G__10786","o","reagent.impl.component/get-wrapper","key","reagent.impl.component/state-atom","cljs.core/reset!","cljs.core/ifn?","js/Error","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","comp","k","ks","i","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","reagent.impl.component/dash-to-camel","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","v","G__10763","error","info","reagent.impl.component/react-class?","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","reagent.impl.component/extract-props","old-argv","fun-map","G__10799","reagent.impl.component/get-argv","js/module$node_modules$create_react_class$index","reagent.impl.component/wrap-render","reagent.impl.component/shallow-obj-to-map","p","legacy-render","reagent.impl.component/props-argv","nextprops","sa","this","G__10767","reagent.impl.component/as-element","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","args","cljs.core/select-keys","cljs.core/name","reagent.impl.component/wrap-funs","reagent.impl.component/camelify-map-keys","reagent.impl.component/fiber-component-path","G__10766","n","reagent.impl.component/reagent-class?","rat","cljs.core.into.cljs$core$IFn$_invoke$arity$2","body","reagent.impl.util/*non-reactive*","cljs.core/empty?","cljs.core/count","reagent.impl.component/get-children","temp__5459__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","G__10789","first-child","cljs.core.subvec.cljs$core$IFn$_invoke$arity$2","new-argv","spec","cljs.core/meta","reagent.impl.component/component-path","oldprops","wrap","G__10806","reagent.impl.util/fun-name","G__10805","owner","G__10795","reagent.impl.component/reactify-component","cljs.core/reduce-kv","G__10788","reagent.impl.component/map-to-js","cached-class","_","G__10793","reagent.impl.component/obligatory","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","reagent.impl.component/comp-name","noargv","a","reagent.impl.batching/next-mount-count","G__10804","cljs.core/fn?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.component/extract-children","reagent.impl.component/static-fns","reagent.impl.component/reagent-component?","G__10779","G__10797","reagent.impl.component/add-obligatory","reagent.impl.util/memoize-1","reagent.impl.util/dash-to-camel","cljs.core/vector?","e","reagent.impl.component/custom-wrapper","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","len","reagent.impl.component/*current-component*","withrender","reagent.ratom/run-in-reaction","reagent.impl.component/do-render","G__10803","reagent.impl.batching/mark-rendered","*current-component*10773","reagent.impl.component/fn-to-class","tag","reagent.impl.component/cached-react-class","G__10782","reagent.impl.component/as-class","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","js/reagent","js/reagent.impl","js/reagent.impl.component","js/reagent.impl.component.as-element","reagent.impl.component/create-class","G__10761","js/module$node_modules$react$index.Children.toArray","cljs.core/map?","cljs.core/js-keys","e10778","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","nextstate","G__10787","G__10774","cljs.core/Keyword","reagent.impl.util/*always-update*","reagent.impl.component/get-props","reagent.ratom.atom.cljs$core$IFn$_invoke$arity$1","reagent.ratom/dispose!","and__3938__auto__"],"sourcesContent":["(ns reagent.impl.component\n  (:require [create-react-class :as create-react-class]\n            [react :as react]\n            [reagent.impl.util :as util]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn dev? warn error warn-unless\n                                          assert-callable]]))\n\n(declare ^:dynamic *current-component*)\n\n\n;;; Argv access\n\n(defn shallow-obj-to-map [o]\n  (let [ks (js-keys o)\n        len (alength ks)]\n    (loop [m {} i 0]\n      (if (< i len)\n        (let [k (aget ks i)]\n          (recur (assoc m (keyword k) (aget o k)) (inc i)))\n        m))))\n\n(defn extract-props [v]\n  (let [p (nth v 1 nil)]\n    (if (map? p) p)))\n\n(defn extract-children [v]\n  (let [p (nth v 1 nil)\n        first-child (if (or (nil? p) (map? p)) 2 1)]\n    (if (> (count v) first-child)\n      (subvec v first-child))))\n\n(defn props-argv [c p]\n  (if-some [a ($ p :argv)]\n    a\n    [(.-constructor c) (shallow-obj-to-map p)]))\n\n(defn get-argv [c]\n  (props-argv c ($ c :props)))\n\n(defn get-props [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-props v)\n      (shallow-obj-to-map p))))\n\n(defn get-children [c]\n  (let [p ($ c :props)]\n    (if-some [v ($ p :argv)]\n      (extract-children v)\n      (->> ($ p :children)\n           (react/Children.toArray)\n           (into [])))))\n\n(defn ^boolean reagent-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :reagentRender)))))\n\n(defn ^boolean react-class? [c]\n  (and (fn? c)\n       (some? (some-> c .-prototype ($ :render)))))\n\n(defn ^boolean reagent-component? [c]\n  (some? ($ c :reagentRender)))\n\n(defn cached-react-class [c]\n  ($ c :cljsReactClass))\n\n(defn cache-react-class [c constructor]\n  ($! c :cljsReactClass constructor))\n\n\n;;; State\n\n(defn state-atom [this]\n  (let [sa ($ this :cljsState)]\n    (if-not (nil? sa)\n      sa\n      ($! this :cljsState (ratom/atom nil)))))\n\n;; avoid circular dependency: this gets set from template.cljs\n(defonce as-element nil)\n\n\n;;; Rendering\n\n(defn wrap-render [c]\n  (let [f ($ c :reagentRender)\n        _ (assert-callable f)\n        res (if (true? ($ c :cljsLegacyRender))\n              (.call f c c)\n              (let [v (get-argv c)\n                    n (count v)]\n                (case n\n                  1 (.call f c)\n                  2 (.call f c (nth v 1))\n                  3 (.call f c (nth v 1) (nth v 2))\n                  4 (.call f c (nth v 1) (nth v 2) (nth v 3))\n                  5 (.call f c (nth v 1) (nth v 2) (nth v 3) (nth v 4))\n                  (.apply f c (.slice (into-array v) 1)))))]\n    (cond\n      (vector? res) (as-element res)\n      (ifn? res) (let [f (if (reagent-class? res)\n                           (fn [& args]\n                             (as-element (apply vector res args)))\n                           res)]\n                   ($! c :reagentRender f)\n                   (recur c))\n      :else res)))\n\n(declare comp-name)\n\n(defn do-render [c]\n  (binding [*current-component* c]\n    (if (dev?)\n      ;; Log errors, without using try/catch (and mess up call stack)\n      (let [ok (array false)]\n        (try\n          (let [res (wrap-render c)]\n            (aset ok 0 true)\n            res)\n          (finally\n            (when-not (aget ok 0)\n              (error (str \"Error rendering component\"\n                          (comp-name)))))))\n      (wrap-render c))))\n\n\n;;; Method wrapping\n\n(def rat-opts {:no-cache true})\n\n(def static-fns\n  {:render\n   (fn render []\n     (this-as c (if util/*non-reactive*\n                  (do-render c)\n                  (let [rat ($ c :cljsRatom)]\n                    (batch/mark-rendered c)\n                    (if (nil? rat)\n                      (ratom/run-in-reaction #(do-render c) c \"cljsRatom\"\n                                             batch/queue-render rat-opts)\n                      (._run rat false))))))})\n\n(defn custom-wrapper [key f]\n  (case key\n    :getDefaultProps\n    (throw (js/Error. \"getDefaultProps not supported\"))\n\n    :getInitialState\n    (fn getInitialState []\n      (this-as c (reset! (state-atom c) (.call f c c))))\n\n    :componentWillReceiveProps\n    (fn componentWillReceiveProps [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :shouldComponentUpdate\n    (fn shouldComponentUpdate [nextprops nextstate]\n      (or util/*always-update*\n          (this-as c\n                   ;; Don't care about nextstate here, we use forceUpdate\n                   ;; when only when state has changed anyway.\n                   (let [old-argv ($ c :props.argv)\n                         new-argv ($ nextprops :argv)\n                         noargv (or (nil? old-argv) (nil? new-argv))]\n                     (cond\n                       (nil? f) (or noargv (try (not= old-argv new-argv)\n                                                (catch :default e\n                                                  (warn \"Exception thrown while comparing argv's in shouldComponentUpdate: \" old-argv \" \" new-argv \" \" e)\n                                                  false)))\n                       noargv (.call f c c (get-argv c) (props-argv c nextprops))\n                       :else  (.call f c c old-argv new-argv))))))\n\n    :componentWillUpdate\n    (fn componentWillUpdate [nextprops]\n      (this-as c (.call f c c (props-argv c nextprops))))\n\n    :componentDidUpdate\n    (fn componentDidUpdate [oldprops]\n      (this-as c (.call f c c (props-argv c oldprops))))\n\n    :componentWillMount\n    (fn componentWillMount []\n      (this-as c\n               ($! c :cljsMountOrder (batch/next-mount-count))\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidMount\n    (fn componentDidMount []\n      (this-as c (.call f c c)))\n\n    :componentWillUnmount\n    (fn componentWillUnmount []\n      (this-as c\n               (some-> ($ c :cljsRatom)\n                       ratom/dispose!)\n               (batch/mark-rendered c)\n               (when-not (nil? f)\n                 (.call f c c))))\n\n    :componentDidCatch\n    (fn componentDidCatch [error info]\n      (this-as c (.call f c c error info)))\n\n    nil))\n\n(defn get-wrapper [key f name]\n  (let [wrap (custom-wrapper key f)]\n    (when (and wrap f)\n      (assert-callable f))\n    (or wrap f)))\n\n(def obligatory {:shouldComponentUpdate nil\n                 :componentWillMount nil\n                 :componentWillUnmount nil})\n\n(def dash-to-camel (util/memoize-1 util/dash-to-camel))\n\n(defn camelify-map-keys [fun-map]\n  (reduce-kv (fn [m k v]\n               (assoc m (-> k dash-to-camel keyword) v))\n             {} fun-map))\n\n(defn add-obligatory [fun-map]\n  (merge obligatory fun-map))\n\n(defn wrap-funs [fmap]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender :componentFunction])\n          render-fun (-> renders vals first)]\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:componentFunction fmap))\n        legacy-render (nil? render-fun)\n        render-fun (or render-fun\n                       (:render fmap))\n        name (str (or (:displayName fmap)\n                      (util/fun-name render-fun)))\n        name (case name\n               \"\" (str (gensym \"reagent\"))\n               name)\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (get-wrapper k v name)))\n                        {} fmap)]\n    (assoc fmap\n           :displayName name\n           :autobind false\n           :cljsLegacyRender legacy-render\n           :reagentRender render-fun\n           :render (:render static-fns))))\n\n(defn map-to-js [m]\n  (reduce-kv (fn [o k v]\n               (doto o\n                 (aset (name k) v)))\n             #js{} m))\n\n(defn cljsify [body]\n  (-> body\n      camelify-map-keys\n      add-obligatory\n      wrap-funs\n      map-to-js))\n\n(defn create-class [body]\n  {:pre [(map? body)]}\n  (->> body\n       cljsify\n       create-react-class))\n\n(defn fiber-component-path [fiber]\n  (let [name (some-> fiber\n                     ($ :type)\n                     ($ :displayName))\n        parent (some-> fiber\n                       ($ :return))\n        path (some-> parent\n                     fiber-component-path\n                     (str \" > \"))\n        res (str path name)]\n    (when-not (empty? res) res)))\n\n(defn component-path [c]\n  ;; Alternative branch for React 16\n  ;; Try both original name (for UMD foreign-lib) and manged name (property access, for Closure optimized React)\n  (if-let [fiber (or (some-> c ($ :_reactInternalFiber))\n                     (some-> c (.-_reactInternalFiber)))]\n    (fiber-component-path fiber)\n    (let [instance (or (some-> c ($ :_reactInternalInstance))\n                       (some-> c (.-_reactInternalInstance))\n                       c)\n          elem (or (some-> instance ($ :_currentElement))\n                   (some-> instance (.-_currentElement)))\n          name (some-> elem\n                       ($ :type)\n                       ($ :displayName))\n          owner (or (some-> elem ($ :_owner))\n                    (some-> elem (.-_owner)))\n          path (some-> owner\n                       component-path\n                       (str \" > \"))\n          res (str path name)]\n      (when-not (empty? res) res))))\n\n(defn comp-name []\n  (if (dev?)\n    (let [c *current-component*\n          n (or (component-path c)\n                (some-> c .-constructor util/fun-name))]\n      (if-not (empty? n)\n        (str \" (in \" n \")\")\n        \"\"))\n    \"\"))\n\n(defn fn-to-class [f]\n  (assert-callable f)\n  (warn-unless (not (and (react-class? f)\n                         (not (reagent-class? f))))\n               \"Using native React classes directly in Hiccup forms \"\n               \"is not supported. Use create-element or \"\n               \"adapt-react-class instead: \" (let [n (util/fun-name f)]\n                                               (if (empty? n) f n))\n               (comp-name))\n  (if (reagent-class? f)\n    (cache-react-class f f)\n    (let [spec (meta f)\n          withrender (assoc spec :reagent-render f)\n          res (create-class withrender)]\n      (cache-react-class f res))))\n\n(defn as-class [tag]\n  (if-some [cached-class (cached-react-class tag)]\n    cached-class\n    (fn-to-class tag)))\n\n(defn reactify-component [comp]\n  (if (react-class? comp)\n    comp\n    (as-class comp)))\n"]}