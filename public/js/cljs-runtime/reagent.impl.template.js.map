{"version":3,"file":"reagent.impl.template.js","sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/oset","jsprops","key","reagent.impl.template/make-element","argv","comp","first-child","reagent.impl.template/native-element","v","reagent.impl.template/expand-seq-check","x","reagent.impl.component/comp-name","this","value","reagent.impl.template/try-get-key","cljs.core/name","reagent.impl.template/re-tag","id","hiccup-tag","cljs.core/next","vec__10831","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","tag","cljs.core/re-matches","class","cljs.core/coll?","cljs.core/clj->js","dom-value","G__10811","o","reagent.impl.component/*current-component*","reagent.impl.template/str-coll","cljs.core/str","msg","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/input-render-setup","js/Error","reagent.impl.template/find-dom-node","k","p__10821","map__10822","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/stringify-class","props","cljs.core/keyword-identical?","G__10829","on-write","rendered-value","G__10862","cljs.core/count","reagent.impl.template/input-handle-change","on-change","e","p","args","new-cursor-offset","cljs.core/fn?","cljs.core/with-meta","cljs.core/meta","reagent.impl.component/as-element","reagent.impl.template/as-element","cljs.core/map?","cljs.core/reduce-kv","reagent.impl.template/kv-conv","reagent.impl.template/named?","c","reagent.impl.template/get-key","coll","reagent.impl.template/input-component-set-value","existing-offset-from-end","p__10824","map__10825","reagent.impl.template/input-node-set-value","reagent.impl.util/dash-to-camel","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.template/custom-kv-conv","parsed","node","reagent.impl.template/oget","reagent.impl.template/input-spec","G__10820","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/module$node_modules$react$index.createElement","id-class","first","hasprops","G__10819","reagent.impl.template/cached-prop-name","temp__5459__auto__","k'","reagent.impl.template/cache-get","reagent.impl.template/prop-name-cache","G__10828","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","n","pos","derefed","reagent.impl.template/has-selection-api?","reagent.impl.template/reagent-input-class","reagent.impl.template/key-from-vec","val","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","reagent.impl.template.hiccup_err.cljs$core$IFn$_invoke$arity$variadic","reagent.impl.template/valid-tag?","reagent.impl.template/js-val?","reagent.impl.template/NativeWrapper","clojure.string.join.cljs$core$IFn$_invoke$arity$2","a","res","reagent.impl.template/reag-element","n__4408__auto__","i","reagent.impl.template/expand-seq","s","temp__5461__auto__","reagent.impl.template/convert-prop-value","reagent.impl.util/fun-name","reagent.impl.template/these-inputs-have-selection-api","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","G__10841","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","reagent.impl.template/hiccup-tag?","G__10815","reagent.impl.template/cached-custom-prop-name","and__3938__auto__","reagent.impl.template/set-id-class","js/module$node_modules$react$index.Fragment","js/document","cljs.core/vector?","reagent.impl.template/cached-parse","G__10840","reagent.impl.template/reagent-input","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","var_args","args__4534__auto__","len__4531__auto__","i__4532__auto__","argseq__4535__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq10843","G__10844","cljs.core/first","self__4518__auto__","reagent.impl.template/convert-props","reagent.impl.template/input-component?","reagent.impl.template/expand-seq-dev","reagent.impl.template/convert-custom-prop-value","reagent.impl.template/vec-to-elem","G__10839","reagent.impl.component/create-class","G__10863","G__10864","G__10865","cljs.core/Keyword","component","cljs.core/ifn?","reagent.ratom/check-derefs","ctx","old-class","reagent.impl.template/tag-name-cache","reagent.impl.template/parse-tag","reagent.impl.template/->NativeWrapper","reagent.impl.template/adapt-react-class","vec__10859","reagent.impl.batching/do-after-render","G__10848","e10834","reagent.impl.template/custom-prop-name-cache","this__4192__auto__","writer__4193__auto__","opt__4194__auto__","cljs.core/-write","goog/typeOf","node-value","reagent.impl.template/input-unmount","clojure.string/replace","reagent.impl.template/fragment-element","reagent.impl.component/as-class","cljs.core/Symbol","reagent/debug.has-console","reagent/debug.tracking","reagent/debug.track-console","js/console","cljs.core/seq?","input-type","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","p1__10827#","cljs.core/contains?","clojure.walk/prewalk"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n(declare as-element)\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n;; Previous few functions copied for custom elements,\n;; without mapping from class to className etc.\n\n(def custom-prop-name-cache #js{})\n\n(defn cached-custom-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get custom-prop-name-cache (name k))]\n      k'\n      (aset custom-prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn custom-kv-conv [o k v]\n  (doto o\n    (aset (cached-custom-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-custom-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv custom-kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class\n  \"Takes the id and class from tag keyword, and adds them to the\n  other props. Parsed tag is JS object with :id and :class properties.\"\n  [props id-class]\n  (let [id ($ id-class :id)\n        class ($ id-class :class)]\n    (cond-> props\n      ;; Only use ID from tag keyword if no :id in props already\n      (and (some? id)\n           (nil? (:id props)))\n      (assoc :id id)\n\n      ;; Merge classes\n      class\n      (assoc :class (let [old-class (:class props)]\n                      (if (nil? old-class) class (str class \" \" (if (named? old-class)\n                                                                  (name old-class)\n                                                                  old-class))))))))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (keep (fn [c]\n                 (if c\n                   (if (named? c)\n                     (name c)\n                     c))))\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (let [props (-> props\n                  stringify-class\n                  (set-id-class id-class))]\n    (if ($ id-class :custom)\n      (convert-custom-prop-value props)\n      (convert-prop-value props))))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n\n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          ;; Default to the root node within this component\n          node (find-dom-node this)]\n      (when (not= rendered-value dom-value)\n        (input-node-set-value node rendered-value dom-value this {})))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  [this jsprops]\n  ;; Don't rely on React for updating \"controlled inputs\", since it\n  ;; doesn't play well with async rendering (misses keystrokes).\n  (when (and (some? jsprops)\n             (.hasOwnProperty jsprops \"onChange\")\n             (.hasOwnProperty jsprops \"value\"))\n    (assert find-dom-node\n            \"reagent.dom needs to be loaded for controlled input to work\")\n    (let [v ($ jsprops :value)\n          value (if (nil? v) \"\" v)\n          on-change ($ jsprops :onChange)]\n      (when-not ($ this :cljsInputLive)\n        ;; set initial value\n        ($! this :cljsInputLive true)\n        ($! this :cljsDOMValue value))\n      ($! this :cljsRenderedValue value)\n      (js-delete jsprops \"value\")\n      (doto jsprops\n        ($! :defaultValue value)\n        ($! :onChange #(input-handle-change this on-change %))))))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js {:name tag\n         :id id\n         :class class\n         ;; Custom element names must contain hyphen\n         ;; https://www.w3.org/TR/custom-elements/#custom-elements-core-concepts\n         :custom (not= -1 (.indexOf tag \"-\"))}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn fragment-element [argv]\n  (let [props (nth argv 1 nil)\n        hasprops (or (nil? props) (map? props))\n        jsprops (convert-prop-value (if hasprops props))\n        first-child (+ 1 (if hasprops 1 0))]\n    (when-some [key (key-from-vec argv)]\n      (oset jsprops \"key\" key))\n    (make-element argv react/Fragment jsprops first-child)))\n\n(defn adapt-react-class\n  [c]\n  (doto (->NativeWrapper)\n    ($! :name c)\n    ($! :id nil)\n    ($! :class nil)))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (input-component? comp)\n        (-> [(reagent-input) argv comp jsprops first-child]\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (keyword-identical? :<> tag)\n      (fragment-element v)\n\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          ;; TODO: Doesn't this match :>foo or any keyword starting with >\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          ;; Apply metadata (e.g. :key) to the outermost element.\n          ;; Metadata is probably used only with sequeneces, and in that case\n          ;; only the key of the outermost element matters.\n          (recur (with-meta [(subs n 0 pos)\n                             (assoc (with-meta v nil) 0 (subs n (inc pos)))]\n                            (meta v)))))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}