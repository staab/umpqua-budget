{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["repl-error","e","clojure.string/replace","shadow.cljs.devtools.client.env/files-url","handler","msg","log-call","fn-sym","next","cljs.core/*1","ret","shadow.cljs.devtools.client.env/set-print-fns!","msg-fn","js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.env","js/shadow.cljs.devtools.client.env.reset-print-fn-ref","shadow.cljs.devtools.client.env/reset-print-fn-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","complete-fn","shadow.cljs.devtools.client.env/reset-print-fns!","cljs.core/seq","shadow.cljs.devtools.client.env/devtools-url","temp__5457__auto__","cljs.core/deref","x","load-code-fn","shadow.cljs.devtools.client.env/get-ws-url-base","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/runtime-id","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","log-missing-fn","goog/define","runtime-type","cljs.core/name","repl-expr","shadow.cljs.devtools.client.env/repl-error","shadow.cljs.devtools.client.env/server-host","load-tasks","and__3938__auto__","shadow.cljs.devtools.client.env/use-document-host","G__19264","clojure.string.join.cljs$core$IFn$_invoke$arity$2","args","shadow.cljs.devtools.client.env/repl-print-fn","shadow.cljs.devtools.client.env/do-js-reload*","failure-fn","cljs.core/reverse","original-print-fn","G__19257","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__19309#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/make-task-fn","cljs.core/set-print-fn!","p__19317","map__19318","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.env/before-load-src","type","ns","src","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","shadow.cljs.devtools.client.env/repl-results-ref","cljs.core/assoc","result-id","js/Date.now","js/goog.global.document.location","js/document.location.hostname","*default-data-reader-fn*19276","cljs.tools.reader/*default-data-reader-fn*","result","printed","cljs.core/reset!","cljs.core/set-print-err-fn!","original-print-err-fn","fn-obj","error","task","remaining","p__19303","vec__19304","seq__19305","first__19306","cljs.core/first","cljs.core/next","remaining-tasks","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/console.log","js/goog.getObjectByName","fn-str","js/$CLJS","cljs.core/*3","cljs.core/*2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","log-call-async","reload-info","G__19263","e19307","G__19308","e19283","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/get-server-host","shadow.cljs.devtools.client.env/server-port","cljs.core/*print-err-fn*","ex","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__19310#","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.into.cljs$core$IFn$_invoke$arity$2","js/console.warn","text","seq__19320","chunk__19321","count__19322","i__19323","cljs.core/chunked-seq?","c__4351__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","js/goog.global.SHADOW_NS_RESET","js/goog.global.document","shadow.cljs.devtools.client.env/process-ws-msg","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","obj","e19261","cljs.core/Keyword","var_args","G__19312","shadow.cljs.devtools.client.env/do-js-reload","js/Error","p__19313","map__19314","js/shadow.cljs.devtools.client.env.runtime-id","cljs.core/random-uuid","e19262","async","shadow.cljs.devtools.client.env/repl-pprint","cljs.core/*print-fn*","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","sb__4462__auto__","goog.string/StringBuffer","*print-newline*19251","cljs.core/*print-newline*","*print-fn*19252","x__4463__auto__","cljs.core/*e","cljs.core/pr-str","e19295","p__19285","p__19286","map__19288","map__19289","tag","value","shadow.cljs.devtools.client.env/repl-call","cljs.core/assoc-in","shadow.cljs.devtools.client.env/ws-url","shadow.cljs.devtools.client.env/ws-listener-url","client-type","shadow.cljs.devtools.client.env/devtools-info","js/shadow.cljs.devtools.client.env.repl-results-ref","js/goog.global.document.location.hostname"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n;; FIXME: make this persistent somehow?\n(defonce runtime-id (str (random-uuid)))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define server-host \"\")\n\n(goog-define server-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn devtools-info []\n  #js {:server-port server-port\n       :server-host server-host\n       :build-id build-id\n       :proc-id proc-id\n       :runtime-id runtime-id})\n\n(defn get-server-host []\n  (cond\n    (and use-document-host\n         js/goog.global.document\n         js/goog.global.document.location\n         (seq js/goog.global.document.location.hostname))\n    js/document.location.hostname\n\n    (seq server-host)\n    server-host\n\n    :else\n    \"localhost\"))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-server-host) \":\" server-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [runtime-type]\n  {:pre [(keyword? runtime-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" runtime-id \"/\" (name runtime-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defonce repl-results-ref (atom {}))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result-id (str (random-uuid))\n          result {:type :repl/result\n                  :result-id result-id}\n          ret (repl-expr)]\n\n      ;; FIXME: this needs some kind of GC, shouldn't keep every single result forever\n      (swap! repl-results-ref assoc result-id {:timestamp (js/Date.now)\n                                               :result ret})\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n        (let [printed (repl-print-fn ret)]\n          (swap! repl-results-ref assoc-in [result-id :printed] printed)\n          (assoc result :value printed))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [failure-fn [task & remaining-tasks]]\n  (when task\n    (try\n      (task #(do-js-reload* failure-fn remaining-tasks))\n      (catch :default e\n        (failure-fn e task remaining-tasks)))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     (fn [])))\n  ([msg load-code-fn complete-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     complete-fn\n     (fn [error task remaining]\n       (js/console.warn \"JS reload failed\" error))))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn failure-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* failure-fn load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n"]}