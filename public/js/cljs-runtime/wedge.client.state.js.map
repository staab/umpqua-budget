{"version":3,"sources":["wedge/client/state.cljs"],"mappings":";;;;AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA;AAOL,AAAA,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAM,AAACC,AAAON;;AACvB,AAAA,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAW,AAAA,AAAA,AAACC,AAASJ;;AAC9B,AAAA,AAAAJ,AAAAC,AAAAC,AAAAO;AAAA;AAAA,AAAA,AAASC,AAAG,AAAA,AAAA,AAACF,AAASJ;;AACtB,AAAA,AAAAJ,AAAAC,AAAAC,AAAAS;AAAA;AAAA,AAAA,AAASC,AAAK,AAAA,AAAA,AAACJ,AAASJ;;AACxB,AAAA,AAAAJ,AAAAC,AAAAC,AAAAW;AAAA;AAAA,AAAA,AAASC,AAAQ,AAAA,AAAA,AAACN,AAASJ;;AAC3B,AAAA,AAAAJ,AAAAC,AAAAC,AAAAa;AAAA;AAAA,AAAA,AAASC,AAAO,AAAA,AAAA,AAACR,AAASJ;;AAE1B,AAAA,AAAMa;AAAN,AACE,AAAAC,AAAW,AAAA,AAAUE;AAArB,AAAA,AAAAF;AAAA,AAAAA,AAASC;AAAT,AACE,AAACE,AAAOjB,AAAM,AAACkB,AAAYH;;AAD7B;;;AAGF,AAAA,AAAMI;AAAN,AACE,AAAA,AAAUH,AAAwB,AAAA,AAAAI,AAACC,AAASrB","names":["wedge.client.state/starting-state","js/wedge","js/wedge.client","js/wedge.client.state","js/wedge.client.state.state","wedge.client.state/state","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","js/wedge.client.state.session-id","wedge.client.state/session-id","reagent.core/cursor","js/wedge.client.state.db","wedge.client.state/db","js/wedge.client.state.page","wedge.client.state/page","js/wedge.client.state.sidebar","wedge.client.state/sidebar","js/wedge.client.state.picker","wedge.client.state/picker","wedge.client.state/load-state!","temp__5718__auto__","v","js/localStorage","cljs.core/reset!","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","wedge.client.state/save-state!","cljs.core/deref","cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns wedge.client.state\n  (:require [cljs.reader :refer [read-string]]\n            [reagent.core :as r]))\n\n(def starting-state\n  {:session-id nil\n   :page :dashboard\n   :sidebar {:open? false}\n   :picker {:open? false}\n   :db {:last-load nil :value nil :error nil}})\n\n(defonce state (r/atom starting-state))\n(defonce session-id (r/cursor state [:session-id]))\n(defonce db (r/cursor state [:db]))\n(defonce page (r/cursor state [:page]))\n(defonce sidebar (r/cursor state [:sidebar]))\n(defonce picker (r/cursor state [:picker]))\n\n(defn load-state! []\n  (if-let [v (.getItem js/localStorage \"wedge\")]\n    (reset! state (read-string v))))\n\n(defn save-state! []\n  (.setItem js/localStorage \"wedge\" (prn-str @state)))\n\n"]}