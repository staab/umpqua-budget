{"version":3,"sources":["wedge/client/ws.cljs"],"mappings":";;;AAGA,AAAKA,AAAG,AAAA,AAACC;AACT,AAAKC,AAAM,AAAA,AAACD;AAIZ,AAAA,AAAME,AAAOC,AAAKC;AAAlB,AACE,AAACC,AACCJ,AACA,AAAKK;AAAL,AACE,AAAMC,AAAa,AAACC,AAAKF,AAAS,AAAA,AAAA,AAAA,AAACG,AAAcN,AAAcC;AAA/D,AACE,AAAA,AAAAM,AAAKX;AACH,AAAI,AAAA,AAACa;AAADD;AAAA,AAAO,AAAA,AAAAD,AAAAC,AAAQZ;;AAAMQ;;AAAzB;;AACAD;;;;AAIV,AAAA,AAAAO,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAAjB,AAAA,AAAU0B;AAAVR,AAAA,AAAAlB,AAAA;AAAAmB,AAAA,AAAAnB,AAAA;AAAAoB,AAAA,AAAApB,AAAA;AAAAqB,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAJ,AAAAC,AAAAC,AAAAC;;;AAIA,AAAKO,AAAY,AAAA,AAAC3B;AAElB,AAAA,AAAM4B,AAAYC;AAAlB,AACE,AAAA,AAACC,AAAuB,AAAQD;;AAChC,AAAAE,AAAgB,AAACC,AAAwB,AAAQH;AAAjD,AAAA,AAAAE,AAAAA,AAACL,AAAAA,AAAAA;;AAEH,AAAA,AAAMO,AAAWC;AAAjB,AACE,AAAAC,AAAA,AAAAzB,AAAmBX;AAAnB,AAAA,AAAAoC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAAuB,AAAQA;;AAA/B;;AACA,AAAA,AAAA1B,AAAC2B,AAAkBV;;AACnB,AAACW,AAAOX,AAAY,AAAA,AAACY;AAAD,AAAiB,AAAM,AAAA,AAAA7B,AAAA,AAAOX;AAAb,AAAiB,AAACkC,AAAAA,AAAAA,AAAUO,AAAAA;;AAA5B;;AAAjB;;AACpB,AAAMC,AAAO,AAAAC,AAAA;AAAb,AACE,AAAA,AAAmBD,AAAc;;AAAA,AAAO,AAACH,AAAOvC,AAAG0C;;AAAQ,AAACP,AAAAA,AAAAA;;;;AAC5D,AAAA,AAAmBO,AAAiBb;;AACpC,AAAA,AAAA,AAAmBa;;AAAnB,AAAmC,AAAA,AAACH,AAAOvC;;;;AAC3C,AAAA,AAAA,AAAmB0C;;AAAnB,AAAmC,AAAA,AAACH,AAAOvC","names":["wedge.client.ws/ws","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","wedge.client.ws/queue","wedge.client.ws/send!","type","payload","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","messages","all-messages","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/deref","p1__27225#","cljs.core/run!","js/wedge","js/wedge.client","js/wedge.client.ws","js/wedge.client.ws.handle-message","method-table__4613__auto__","prefer-table__4614__auto__","method-cache__4615__auto__","cached-hierarchy__4616__auto__","hierarchy__4617__auto__","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__27226","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","wedge.client.ws/handle-message","wedge.client.ws/ws-interval","wedge.client.ws/on-message","evt","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__27227","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","wedge.client.ws/start-ws!","f","temp__5720__auto__","old-ws","js/clearInterval","cljs.core/reset!","js/setInterval","cljs.core/identity","socket","js/WebSocket"],"sourcesContent":["(ns wedge.client.ws\n  (:require [cljs.reader :refer [read-string]]))\n\n(def ws (atom nil))\n(def queue (atom []))\n\n;; Outgoing\n\n(defn send! [type payload]\n  (swap!\n    queue\n    (fn [messages]\n      (let [all-messages (conj messages (pr-str {:type type :payload payload}))]\n        (if @ws\n          (do (run! #(.send @ws %) all-messages) [])\n          messages)))))\n\n;; Incoming\n\n(defmulti handle-message :type)\n\n;; Websocket setup\n\n(def ws-interval (atom nil))\n\n(defn on-message [evt]\n  (prn \"Handling message\" (.-data evt))\n  (handle-message (cljs.reader/read-string (.-data evt))))\n\n(defn start-ws! [f]\n  (when-let [old-ws @ws] (.close old-ws))\n  (js/clearInterval @ws-interval)\n  (reset! ws-interval (js/setInterval #(when (nil? @ws) (start-ws! identity)) 1000))\n  (let [socket (js/WebSocket. \"ws://localhost:5000\")]\n    (.addEventListener socket \"open\" (fn [] (reset! ws socket) (f)))\n    (.addEventListener socket \"message\" on-message)\n    (.addEventListener socket \"error\" #(reset! ws nil))\n    (.addEventListener socket \"close\" #(reset! ws nil))))\n\n\n"]}